# -----------------------------------------------
# 必要なライブラリのインポート
# -----------------------------------------------
import streamlit as st                           # Webアプリを作るためのライブラリ
from snowflake.snowpark.context import get_active_session  # Snowflakeとの接続情報を取得するため
import snowflake.snowpark.functions as F         # Snowparkの関数を使うため (フィルタや集計など)

# -----------------------------------------------
# タイトルや説明文をアプリに表示
# -----------------------------------------------
st.title("CitiBike Trips Analyze App")   # アプリのタイトルを表示
st.write(
    """
    これはサンプルのアプリです  
    Snowflakeに保存されているCitiBikeデータを検索・表示できます。
    """
)

# -----------------------------------------------
# Snowflakeとの接続を確立
# -----------------------------------------------
session = get_active_session()   # Snowflakeのセッションを取得 (接続中のユーザー情報を利用)

# -----------------------------------------------
# サイドバー（検索条件を入力するエリア）
# -----------------------------------------------
with st.sidebar:
    st.subheader("検索条件")  # サイドバーの見出しを表示

    # 性別を選択できるプルダウンメニュー
    # GENDERカラムの値に対応（0=不明, 1=男性, 2=女性）
    gender_option = st.selectbox(
        "性別", ["0", "1", "2"]
    )

# -----------------------------------------------
# タブを作成（画面を切り替えられるようにする）
# -----------------------------------------------
tab1, tab2, tab3 = st.tabs(["表", "B", "C"])

# -----------------------------------------------
# Tab1: データの表示
# -----------------------------------------------
with tab1:
    # TRIPSテーブルからデータを取得
    df = session.table("CITIBIKE.PUBLIC.TRIPS")

    # サイドバーで選んだ性別でフィルタリング
    df = df.filter(F.col("GENDER") == gender_option)

    # データの一部を表示（最初の100行）
    st.dataframe(df.limit(100))

    # 該当件数を表示
    st.write("該当件数:", df.count())

# -----------------------------------------------
# Tab2: 空のコンテンツ（今後拡張用）
# -----------------------------------------------
with tab2:
    st.write("")

# -----------------------------------------------
# Tab3: 空のコンテンツ（今後拡張用）
# -----------------------------------------------
with tab3:
    st.write("")
